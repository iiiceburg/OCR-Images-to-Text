{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["i","registerPlugin","FilePondPluginImagePreview","App","props","state","isProcessing","ocrText","pctg","pond","React","createRef","worker","updateProgressAndLog","bind","file","this","setState","load","loadLanguage","initialize","recognize","text","data","m","status","progress","toFixed","createWorker","logger","className","style","marginTop","ref","onaddfile","err","doOCR","onremovefile","fiile","margin","textAlign","class","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wXACA,omGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAQAC,yBAAeC,KAA4B,IAkHpBC,EA9Gd,kDACL,WAAYC,GAAO,IAAD,EASmD,OATnD,qBACd,cAAMA,IACDC,MAAQ,CACTC,cAAe,EACfC,QAAU,GACVC,KAAO,QAEX,EAAKC,KAAOC,IAAMC,YAClB,EAAKC,OAASF,IAAMC,YACpB,EAAKE,qBAAuB,EAAKA,qBAAqBC,KAAK,gBAAM,EAiG1D,OAhGV,yEAGD,WAAYC,GAAI,yEAMZ,OALAC,KAAKC,SAAS,CACVX,cAAe,EACfC,QAAU,GACVC,KAAO,SAEX,SACMQ,KAAKJ,OAAOM,OAAO,KAAD,kBAElBF,KAAKJ,OAAOO,aAAa,OAAO,KAAD,kBAC/BH,KAAKJ,OAAOQ,WAAW,OAAO,KAAD,kBAGFJ,KAAKJ,OAAOS,UAAUN,EAAKA,MAAM,KAAD,WAAjDO,EAAI,EAAZC,KAAQD,KAChBN,KAAKC,SAAS,CACVX,cAAe,EACfC,QAAUe,IACZ,iDACL,mDArBA,IAqBA,kCACD,SAAqBE,GASjB,GAAgB,qBAAbA,EAAEC,OAA8B,CAC/B,IAAIjB,EAAQgB,EAAEE,SAJG,EAI0B,IAC3CV,KAAKC,SAAS,CACVT,KAAOA,EAAKmB,QALA,QASvB,+BACD,WAAoB,IAAD,OAGfX,KAAKJ,OAASgB,uBAAa,CACvBC,OAAQ,SAAAL,GAAC,OAAI,EAAKX,qBAAqBW,QAG9C,oBACD,WAAU,IAAD,OACL,OACI,yBAAKM,UAAU,OACX,yBAAKA,UAAU,aACX,yBAAKC,MAAO,CAACC,UAAY,OAAQF,UAAU,OACvC,yBAAKA,UAAU,aAGf,yBAAKA,UAAU,YACX,kBAAC,WAAQ,CAACG,IAAK,SAAAA,GAAG,OAAI,EAAKxB,KAAOwB,GAC9BC,UAAW,SAACC,EAAIpB,GACZ,EAAKqB,MAAMrB,IAGfsB,aAAc,SAACF,EAAIG,GACf,EAAKrB,SAAS,CACVV,QAAU,SAK1B,yBAAKuB,UAAU,cAInB,yBAAKA,UAAU,QACX,wBAAIA,UAAU,eACV,yBAAKC,MAAO,CAACQ,OAAS,KAAMC,UAAW,QAASV,UAAU,OACtD,yBAAKA,UAAU,aACX,uBAAGA,UAAW,sBAAwBd,KAAKX,MAAMC,aAAe,UAAY,MAAS,IAAC,0BAAMwB,UAAU,eAAed,KAAKX,MAAMC,aAAY,6BAAyBU,KAAKX,MAAMG,KAAI,QAAS,cAAa,QAMtN,yBAAKiC,MAAM,aACP,uBAAGA,MAAM,aAAczB,KAAKX,MAAMC,aAC1B,cACgC,IAA9BU,KAAKX,MAAME,QAAQmC,OAAe,8DAAgE1B,KAAKX,MAAME,WAK3H,yBAAKuB,UAAU,mBAMxB,EA3GN,CAASpB,IAAMiC,WCDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAG,MAAKC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5e113e98.chunk.js","sourcesContent":["import React from 'react';\r\nimport { createWorker } from 'tesseract.js';\r\nimport { FilePond, registerPlugin } from 'react-filepond';\r\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\r\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css';\r\nimport 'filepond/dist/filepond.min.css';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nregisterPlugin(FilePondPluginImagePreview);\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            isProcessing : false,\r\n            ocrText : '',\r\n            pctg : '0.00'\r\n        }\r\n        this.pond = React.createRef();\r\n        this.worker = React.createRef();\r\n        this.updateProgressAndLog = this.updateProgressAndLog.bind(this);\r\n    }\r\n\r\n\r\n    async doOCR(file) {\r\n        this.setState({\r\n            isProcessing : true,\r\n            ocrText : '',\r\n            pctg : '0.00'\r\n        })\r\n        // Loading tesseract.js functions\r\n        await this.worker.load();\r\n        // Loadingg language as 'English'\r\n        await this.worker.loadLanguage('eng');\r\n        await this.worker.initialize('eng');\r\n        // Sending the File Object into the Recognize function to\r\n        // parse the data\r\n        const { data: { text } } = await this.worker.recognize(file.file);\r\n        this.setState({\r\n            isProcessing : false,\r\n            ocrText : text\r\n        })\r\n    };\r\n    updateProgressAndLog(m){\r\n\r\n        // Maximum value out of which percentage needs to be\r\n        // calculated. In our case it's 0 for 0 % and 1 for Max 100%\r\n        // DECIMAL_COUNT specifies no of floating decimal points in our\r\n        // Percentage\r\n        var MAX_PARCENTAGE = 1 ;\r\n        var DECIMAL_COUNT = 2 ;\r\n\r\n        if(m.status === \"recognizing text\"){\r\n            var pctg = (m.progress / MAX_PARCENTAGE) * 100\r\n            this.setState({\r\n                pctg : pctg.toFixed(DECIMAL_COUNT)\r\n            })\r\n\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        // Logs the output object to Update Progress, which\r\n        // checks for Tesseract JS status & Updates the progress\r\n        this.worker = createWorker({\r\n            logger: m => this.updateProgressAndLog(m),\r\n        });\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"container\">\r\n                    <div style={{marginTop : \"10%\"}} className=\"row\">\r\n                        <div className=\"col-md-4\">\r\n\r\n                        </div>\r\n                        <div className=\"col-md-4\">\r\n                            <FilePond ref={ref => this.pond = ref}\r\n                                onaddfile={(err,file) =>{\r\n                                    this.doOCR(file);\r\n\r\n                                }}\r\n                                onremovefile={(err,fiile) =>{\r\n                                    this.setState({\r\n                                        ocrText : ''\r\n                                    })\r\n                                }}\r\n                                />\r\n                        </div>\r\n                        <div className=\"col-md-4\">\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card\">\r\n                        <h5 className=\"card-header\">\r\n                            <div style={{margin : \"1%\", textAlign: \"left\"}} className=\"row\">\r\n                                <div className=\"col-md-12\">\r\n                                    <i className={\"fas fa-sync fa-2x \" + (this.state.isProcessing ? \"fa-spin\" : \"\")}></i> <span className=\"status-text\">{this.state.isProcessing ? `Processing Image ( ${this.state.pctg} % )` : \"Parsed Text\"} </span>\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                        </h5>\r\n                        <div class=\"card-body\">\r\n                            <p class=\"card-text\">{(this.state.isProcessing) ?\r\n                                    '...........'\r\n                                    : this.state.ocrText.length === 0 ? \"No Valid Text Found / Upload Image to Parse Text From Image\" : this.state.ocrText }</p>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"ocr-text\">\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            );}\r\n        }\r\n\r\n        export default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}